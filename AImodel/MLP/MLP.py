import numpy as np
import glob
from sklearn.model_selection import train_test_split
from keras.utils import np_utils
from tensorflow.keras import models
from tensorflow.keras import layers
from tensorflow.keras.callbacks import TensorBoard
#%% Data preparation
def Get_dataset(Pre_file):    
    Pre_list=glob.glob(Pre_file)
    Pre_list.sort()
    Data = np.loadtxt(Pre_list[0],delimiter=' ')
    for i in range(1,len(Pre_list)):Data = np.concatenate((Data,np.loadtxt(Pre_list[i], delimiter=' ')))
    return Data
Train_X,Test_X,Train_y,Test_ya = train_test_split(Get_dataset(r'./Trainset/BOOP*')[:,(1,8,9)],Get_dataset(r'./Trainset/Crystal*'),test_size=0.0005,random_state=1,stratify=Get_dataset(r'./Trainset/Crystal*'))
Train_y= np_utils.to_categorical(Train_y, num_classes=4)
np.save("./Trainset/Train_X.npy",Train_X)
np.save("./Trainset/Train_y.npy",Train_y)
np.save("./Trainset/Test_X.npy",Test_X)
np.save("./Trainset/Test_ya.npy",Test_ya)
#%% Draw Train
Test_X = np.load('./Trainset/Test_X.npy')
Test_ya = np.load('./Trainset/Test_ya.npy')
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D 
LiquidGrid = np.delete(Test_X,np.where(Test_ya != 0),axis=0)
BCCGrid = np.delete(Test_X,np.where(Test_ya != 1),axis=0)
FCCGrid = np.delete(Test_X,np.where(Test_ya != 2),axis=0)
HCPGrid = np.delete(Test_X,np.where(Test_ya != 3),axis=0)
fig = plt.figure(figsize=[14.,14.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.6,label='BCC')
gridplt.scatter(0.159317,0.013161,14.0,c='k',s=250,alpha=1.0,marker='*',label='BCC_Cry')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.6,label='FCC')
gridplt.scatter(-0.159317,-0.013161,12.0,c='k',s=250,alpha=1.0,marker='+',label='FCC_Cry')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.6,label='HCP')
gridplt.scatter(0.134097,-0.012442,12.0,c='k',s=250,alpha=1.0,marker='^',label='HCP_Cry')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=5,azim=340)
#plt.show(gridplt)
plt.savefig('Traindata_W4W6scatter.jpg')
plt.close()
fig = plt.figure(figsize=[14.,14.])
gridplt = fig.add_subplot(111, projection='3d')
#gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='c',s=10,alpha=0.8,label='Liquid')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.6,label='BCC')
gridplt.scatter(0.159317,0.013161,15.0,c='k',s=250,alpha=1.0,marker='*',label='BCC_Cry')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.6,label='FCC')
gridplt.scatter(-0.159317,-0.013161,15.0,c='k',s=250,alpha=1.0,marker='+',label='FCC_Cry')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.6,label='HCP')
gridplt.scatter(0.134097,-0.012442,15.0,c='k',s=250,alpha=1.0,marker='^',label='HCP_Cry')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=90,azim=360)
#plt.show(gridplt)
plt.savefig('Traindata_W4W6scatter_1.jpg')
plt.close()
#%% Build model
def MLP(Train_X,Train_y,Train_epochs=50):
    model = models.Sequential() 
    model.add(layers.Dense(units=64,activation='relu',name='Den1',input_shape=(Train_X.shape[1],)))
    model.add(layers.Dense(units=64,activation='relu',name='Den2'))
    model.add(layers.Dense(units=64,activation='relu',name='Den3'))
#    model.add(layers.Dropout(rate=0.5,name='Drop'))
    model.add(layers.Dense(units=4,activation='softmax',name='Den4'))
    model.compile(optimizer = 'adam',loss='categorical_crossentropy',metrics=['accuracy'])
    model.summary()
    tbCallBack = TensorBoard(log_dir=r'./Tensorboard1',update_freq="epoch",write_graph=True,write_images=False,)
    model.fit(Train_X,Train_y,validation_split=0.2,epochs=Train_epochs,batch_size=128,callbacks=[tbCallBack])
    model.save(r'./classic_mlpmodel1.h5')
    return model
model=MLP(Train_X,Train_y,50)
Test_y=np.argmax(model.predict(Test_X),axis=1)
np.save("./Trainset/Test_y.npy",Test_y)
#%% MD prediction
from tensorflow import keras
model = keras.models.load_model(r'./classic_mlpmodel.h5')
Pred_X=Get_dataset(r'./Predictset/BOOP*')[:,(1,8,9)]
Pred_MLP=np.argmax(model.predict(Pred_X),axis=1) 
np.save("./Predictset/Pred_MLP.npy",Pred_MLP)

Pred_CrystalX=Get_dataset(r'./Crystal/BOOP0*')[:,(1,8,9)]
Pred_CrystalY=np.argmax(model.predict(Pred_CrystalX),axis=1) 
np.save("./Crystal/Pred_Crystal0.npy",Pred_CrystalY)
Pred_CrystalX=Get_dataset(r'./Crystal/BOOP1*')[:,(1,8,9)]
Pred_CrystalY=np.argmax(model.predict(Pred_CrystalX),axis=1) 
np.save("./Crystal/Pred_Crystal1.npy",Pred_CrystalY)
Pred_CrystalX=Get_dataset(r'./Crystal/BOOP2*')[:,(1,8,9)]
Pred_CrystalY=np.argmax(model.predict(Pred_CrystalX),axis=1) 
np.save("./Crystal/Pred_Crystal2.npy",Pred_CrystalY)
Pred_CrystalX=Get_dataset(r'./Crystal/BOOP3*')[:,(1,8,9)]
Pred_CrystalY=np.argmax(model.predict(Pred_CrystalX),axis=1) 
np.save("./Crystal/Pred_Crystal3.npy",Pred_CrystalY)
#%% Draw connect<9
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D 
w4space = np.linspace(0.2,-0.2,20)
w6space = np.linspace(0.02,-0.02,20)
conspace = np.linspace(0,8,9)
W4space, W6space = np.meshgrid(w4space,w6space)
W4space, Conspace = np.meshgrid(W4space,conspace)
W6space, Conspace = np.meshgrid(W6space,conspace)
W4space, W6space, Conspace=W4space.reshape(-1,1),W6space.reshape(-1,1),Conspace.reshape(-1,1)
grid_X = np.concatenate((Conspace,W4space,W6space),axis=1)
grid_Y = np.argmax(model.predict(grid_X),axis=1)
LiquidGrid = np.delete(grid_X,np.where(grid_Y != 0),axis=0)
BCCGrid = np.delete(grid_X,np.where(grid_Y != 1),axis=0)
FCCGrid = np.delete(grid_X,np.where(grid_Y != 2),axis=0)
HCPGrid = np.delete(grid_X,np.where(grid_Y != 3),axis=0)
fig = plt.figure(figsize=[10.,10.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.8,label='BCC')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.8,label='FCC')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.8,label='HCP')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=5,azim=235)
#plt.show(gridplt)
plt.savefig('MLP_GRID_0to8.jpg')
plt.close()
fig = plt.figure(figsize=[10.,10.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.8,label='BCC')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.8,label='FCC')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.8,label='HCP')
gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=90,azim=270)
#plt.show(gridplt)
plt.savefig('MLP_GRID_0to8_1.jpg')
plt.close()
#%% Draw connect>9
w4space = np.linspace(0.2,-0.2,20)
w6space = np.linspace(0.02,-0.02,20)
conspace = np.linspace(9,14,6)
W4space, W6space = np.meshgrid(w4space,w6space)
W4space, Conspace = np.meshgrid(W4space,conspace)
W6space, Conspace = np.meshgrid(W6space,conspace)
W4space, W6space, Conspace=W4space.reshape(-1,1),W6space.reshape(-1,1),Conspace.reshape(-1,1)
grid_X = np.concatenate((Conspace,W4space,W6space),axis=1)
grid_Y = np.argmax(model.predict(grid_X),axis=1)
LiquidGrid = np.delete(grid_X,np.where(grid_Y != 0),axis=0)
BCCGrid = np.delete(grid_X,np.where(grid_Y != 1),axis=0)
FCCGrid = np.delete(grid_X,np.where(grid_Y != 2),axis=0)
HCPGrid = np.delete(grid_X,np.where(grid_Y != 3),axis=0)
fig = plt.figure(figsize=[10.,10.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.8,label='BCC')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.8,label='FCC')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.8,label='HCP')
gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=5,azim=235)
#plt.show(gridplt)
plt.savefig('MLP_GRID_9to14.jpg')
plt.close()
fig = plt.figure(figsize=[10.,10.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.8,label='BCC')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.8,label='FCC')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.8,label='HCP')
gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=90,azim=270)
#plt.show(gridplt)
plt.savefig('MLP_GRID_9to14_1.jpg')
plt.close()
#%% Draw connect<9
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D 
w4space = np.linspace(0.2,-0.2,20)
w6space = np.linspace(0.02,-0.02,20)
conspace = np.linspace(0,14,15)
W4space, W6space = np.meshgrid(w4space,w6space)
W4space, Conspace = np.meshgrid(W4space,conspace)
W6space, Conspace = np.meshgrid(W6space,conspace)
W4space, W6space, Conspace=W4space.reshape(-1,1),W6space.reshape(-1,1),Conspace.reshape(-1,1)
grid_X = np.concatenate((Conspace,W4space,W6space),axis=1)
grid_Y = np.argmax(model.predict(grid_X),axis=1)
LiquidGrid = np.delete(grid_X,np.where(grid_Y != 0),axis=0)
BCCGrid = np.delete(grid_X,np.where(grid_Y != 1),axis=0)
FCCGrid = np.delete(grid_X,np.where(grid_Y != 2),axis=0)
HCPGrid = np.delete(grid_X,np.where(grid_Y != 3),axis=0)
fig = plt.figure(figsize=[12.,12.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.8,label='BCC')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.8,label='FCC')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.8,label='HCP')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=5,azim=235)
#plt.show(gridplt)
plt.savefig('MLP_GRID_0to15.jpg')
plt.close()
fig = plt.figure(figsize=[12.,12.])
gridplt = fig.add_subplot(111, projection='3d')
gridplt.scatter(BCCGrid[:,1],BCCGrid[:,2],BCCGrid[:,0],c='b',s=10,alpha=0.8,label='BCC')
gridplt.scatter(FCCGrid[:,1],FCCGrid[:,2],FCCGrid[:,0],c='g',s=10,alpha=0.8,label='FCC')
gridplt.scatter(HCPGrid[:,1],HCPGrid[:,2],HCPGrid[:,0],c='r',s=10,alpha=0.8,label='HCP')
#gridplt.scatter(LiquidGrid[:,1],LiquidGrid[:,2],LiquidGrid[:,0],c='m',s=10,alpha=0.8,label='Liquid')
gridplt.set_xlabel('W4')
gridplt.set_ylabel('W6')
gridplt.set_zlabel('Connect')
gridplt.legend(loc='upper right', fontsize='large')
gridplt.view_init(elev=90,azim=270)
#plt.show(gridplt)
plt.savefig('MLP_GRID_0to15_1.jpg')
plt.close()